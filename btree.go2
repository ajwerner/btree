package btree

type noopAug[type T Item] struct{}

func (a *noopAug[T]) Clone() noopAug[T] {
	return noopAug[T]{}
}

func (a *noopAug[T]) Update(n Node[T, *noopAug[T]]) {
}

func (a *noopAug[T]) UpdateOnInsert(item T, n, child Node[T, *noopAug[T]]) (updated bool) {
	return false
}
func (a *noopAug[T]) UpdateOnRemoval(item T, n, child Node[T, *noopAug[T]]) (updated bool) {
	return false
}

type BTree[type T Item] struct {
	t AugBTree[T, noopAug[T]]
}

func MakeBTree[type T Item]() BTree[T] {
	return BTree[T]{
		AugBTree[T, noopAug[T]]{},
	}
}

func (t *BTree[T]) Set(v T) {
	t.t.Set(v)
}

type BTreeIterator[type T Item] struct {
	it Iterator[T, noopAug[T]]
}

func (t *BTree[T]) MakeIter() BTreeIterator[T] {
	return BTreeIterator[T]{t.t.MakeIter()}
}

func (it *BTreeIterator[T]) First() {
	it.it.First()
}

func (it *BTreeIterator[T]) Next() {
	it.it.Next()
}

func (it *BTreeIterator[T]) Valid() bool {
	return it.it.Valid()
}

func (it *BTreeIterator[T]) Cur() T {
	return it.it.Cur()
}
