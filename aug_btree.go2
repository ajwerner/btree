package btree

import (
	"fmt"
	"strings"
	"sync/atomic"
	"unsafe"
)

// TODO(ajwerner): It'd be amazing to find a way to make this not a single
// compile-time constant.

const (
	degree   = 16
	maxItems = 2*degree - 1
	minItems = degree - 1
)

// TODO(ajwerner): Probably we want to have comparison return an integer result
// TODO(ajwerner): Probably we want comparison to occur on pointers to the
// objects rather than the objects themselves, at least in some cases. For very
// large objects, probably it's better to just store the objects as pointers
// in the btree itself and to use a sync.Pool to pool allocations. For very
// small objects, directly calling less on the object is probably ideal. The
// question is mid-sized objects.

type Item[T any] interface {
	Less(T) bool
}

// NodeIterator can be utilized by an Aug implementation to iterate the entries
// in a node.
type NodeIterator[T Item[T], *A Aug[T, A]] struct {
	n   *node[T, A]
	pos int
}

// Item returns the item at the given position in the node. Valid i values are
// [0, n.Count()).
func (ni *NodeIterator[T, A]) Item(i int) *T {
	return &ni.n.n.items[i]
}

// Child returns the child node at the given position in the node. Valid i
// values are [0, n.Count()]. If n is a leaf node or no child exists at that
// slot, nil will be returned.
func (ni *NodeIterator[T, A]) Child(i int) Node[*A] {
	if !ni.n.n.leaf && ni.n.children[i] != nil {
		return ni.n.children[i]
	}
	return nil
}

// InitNodeIterator is used during to interate a node passed to an Aug via
// an update method. It allows iteration without any allocations.
func InitNodeIterator[T Item[T], *A Aug[T, A]](ni *NodeIterator[T, A], n Node[*A]) {
	ni.n = n.(*node[T, A])
	ni.pos = 0
}

// TODO(ajwerner): Tighten up this interface and make this more generally
// efficient for updates where possible.
type Node[A any] interface {
	GetA() A
	Count() int16
	IsLeaf() bool
}

type Aug[T Item[T], A any] interface {
	// TODO(ajwerner): document how these update calls work and how to use them
	// properly.

	Clone() A
	Update(n Node[*A])
	UpdateOnInsert(item T, n, child Node[*A]) (updated bool)
	UpdateOnRemoval(item T, n, child Node[*A]) (updated bool)
}

// AugBTree is an implementation of an augmented B-Tree.
//
// Write operations are not safe for concurrent mutation by multiple
// goroutines, but Read operations are.
type AugBTree[T Item[T], *A Aug[T, A]] struct {
	root   *node[T, A]
	length int
}

type leafNode[T Item[T], *A Aug[T, A]] struct {
	ref   int32
	count int16
	leaf  bool
	aug   A
	items [maxItems]T
}

type node[T Item[T], *A Aug[T, A]] struct {
	// TODO(ajwerner): embed the leafNode here to avoid all of the ugly `n.n`
	// calls when that all works in go2 generics.
	n        leafNode[T, A]
	children [maxItems + 1]*node[T, A]
}

func (n *node[T, A]) GetA() *A {
	return &n.n.aug
}

func (n *node[T, A]) IsLeaf() bool {
	return n.n.leaf
}

func (n *node[T, A]) Count() int16 {
	return n.n.count
}

func (n *node[T, A]) IterateItems(f func(T)) {
	for i := int16(0); i < n.n.count; i++ {
		f(n.n.items[i])
	}
}

func (n *node[T, A]) IterateChildren(f func(*A)) {
	if n.n.leaf {
		return
	}
	for i := int16(0); i <= n.n.count; i++ {
		f(&n.children[i].n.aug)
	}
}

//go:nocheckptr casts a ptr to a smaller struct to a ptr to a larger struct.
func leafToNode[T Item[T], *A Aug[T, A]](ln *leafNode[T, A]) *node[T, A] {
	return (*node[T, A])(unsafe.Pointer(ln))
}

func nodeToLeaf[T Item[T], *A Aug[T, A]](n *node[T, A]) *leafNode[T, A] {
	return (*leafNode[T, A])(unsafe.Pointer(n))
}

func newLeafNode[T Item[T], *A Aug[T, A]]() *node[T, A] {
	n := leafToNode(new(leafNode[T, A]))
	n.n.leaf = true
	n.n.ref = 1
	return n
}

func newNode[T Item[T], *A Aug[T, A]]() *node[T, A] {
	n := new(node[T, A])
	n.n.ref = 1
	return n
}

// mut creates and returns a mutable node reference. If the node is not shared
// with any other trees then it can be modified in place. Otherwise, it must be
// cloned to ensure unique ownership. In this way, we enforce a copy-on-write
// policy which transparently incorporates the idea of local mutations, like
// Clojure's transients or Haskell's ST monad, where nodes are only copied
// during the first time that they are modified between Clone operations.
//
// When a node is cloned, the provided pointer will be redirected to the new
// mutable node.
func mut[T Item[T], *A Aug[T, A]](n **node[T, A]) *node[T, A] {
	if atomic.LoadInt32(&(*n).n.ref) == 1 {
		// Exclusive ownership. Can mutate in place.
		return *n
	}
	// If we do not have unique ownership over the node then we
	// clone it to gain unique ownership. After doing so, we can
	// release our reference to the old node. We pass recursive
	// as true because even though we just observed the node's
	// reference count to be greater than 1, we might be racing
	// with another call to decRef on this node.
	c := (*n).clone()
	(*n).decRef(true /* recursive */)
	*n = c
	return *n
}

// incRef acquires a reference to the node.
func (n *node[T, A]) incRef() {
	atomic.AddInt32(&n.n.ref, 1)
}

// decRef releases a reference to the node. If requested, the method
// will recurse into child nodes and decrease their refcounts as well.
func (n *node[T, A]) decRef(recursive bool) {
	if atomic.AddInt32(&n.n.ref, -1) > 0 {
		// Other references remain. Can't free.
		return
	}
	// Clear and release node into memory pool.
	if n.n.leaf {
		// TODO(ajwerner): pooling
	} else {
		// Release child references first, if requested.
		if recursive {
			for i := int16(0); i <= n.n.count; i++ {
				n.children[i].decRef(true /* recursive */)
			}
		}
		// TODO(ajwerner): pooling
	}
}

// clone creates a clone of the receiver with a single reference count.
func (n *node[T, A]) clone() *node[T, A] {
	var c *node[T, A]
	if n.n.leaf {
		c = newLeafNode[T, A]()
	} else {
		c = newNode[T, A]()
	}
	// NB: copy field-by-field without touching n.n.ref to avoid
	// triggering the race detector and looking like a data race.
	c.n.count = n.n.count
	c.n.aug = n.n.aug.Clone()
	c.n.items = n.n.items
	if !c.n.leaf {
		// Copy children and increase each refcount.
		c.children = n.children
		for i := int16(0); i <= c.n.count; i++ {
			c.children[i].incRef()
		}
	}
	return c
}

func (n *node[T, A]) insertAt(index int, item T, nd *node[T, A]) {
	if index < int(n.n.count) {
		copy(n.n.items[index+1:n.n.count+1], n.n.items[index:n.n.count])
		if !n.n.leaf {
			copy(n.children[index+2:n.n.count+2], n.children[index+1:n.n.count+1])
		}
	}
	n.n.items[index] = item
	if !n.n.leaf {
		n.children[index+1] = nd
	}
	n.n.count++
}

func (n *node[T, A]) pushBack(item T, nd *node[T, A]) {
	n.n.items[n.n.count] = item
	if !n.n.leaf {
		n.children[n.n.count+1] = nd
	}
	n.n.count++
}

func (n *node[T, A]) pushFront(item T, nd *node[T, A]) {
	if !n.n.leaf {
		copy(n.children[1:n.n.count+2], n.children[:n.n.count+1])
		n.children[0] = nd
	}
	copy(n.n.items[1:n.n.count+1], n.n.items[:n.n.count])
	n.n.items[0] = item
	n.n.count++
}

// removeAt removes a value at a given index, pulling all subsequent values
// back.
func (n *node[T, A]) removeAt(index int) (T, *node[T, A]) {
	var child *node[T, A]
	if !n.n.leaf {
		child = n.children[index+1]
		copy(n.children[index+1:n.n.count], n.children[index+2:n.n.count+1])
		n.children[n.n.count] = nil
	}
	n.n.count--
	out := n.n.items[index]
	copy(n.n.items[index:n.n.count], n.n.items[index+1:n.n.count+1])
	var r T
	n.n.items[n.n.count] = r
	return out, child
}

// popBack removes and returns the last element in the list.
func (n *node[T, A]) popBack() (T, *node[T, A]) {
	n.n.count--
	out := n.n.items[n.n.count]
	var r T
	n.n.items[n.n.count] = r
	if n.n.leaf {
		return out, nil
	}
	child := n.children[n.n.count+1]
	n.children[n.n.count+1] = nil
	return out, child
}

// popFront removes and returns the first element in the list.
func (n *node[T, A]) popFront() (T, *node[T, A]) {
	n.n.count--
	var child *node[T, A]
	if !n.n.leaf {
		child = n.children[0]
		copy(n.children[:n.n.count+1], n.children[1:n.n.count+2])
		n.children[n.n.count+1] = nil
	}
	out := n.n.items[0]
	copy(n.n.items[:n.n.count], n.n.items[1:n.n.count+1])
	var r T
	n.n.items[n.n.count] = r
	return out, child
}

// find returns the index where the given item should be inserted into this
// list. 'found' is true if the item already exists in the list at the given
// index.
func (n *node[T, A]) find(item T) (index int, found bool) {
	// Logic copied from sort.Search. Inlining this gave
	// an 11% speedup on BenchmarkBTreeDeleteInsert.
	i, j := 0, int(n.n.count)
	for i < j {
		h := int(uint(i+j) >> 1) // avoid overflow when computing h
		// i â‰¤ h < j
		if item.Less(n.n.items[h]) {
			j = h
		} else if n.n.items[h].Less(item) {
			i = h + 1
		} else {
			return h, true
		}
	}
	return i, false
}

// split splits the given node at the given index. The current node shrinks,
// and this function returns the item that existed at that index and a new
// node containing all items/children after it.
//
// Before:
//
//          +-----------+
//          |   x y z   |
//          +--/-/-\-\--+
//
// After:
//
//          +-----------+
//          |     y     |
//          +----/-\----+
//              /   \
//             v     v
// +-----------+     +-----------+
// |         x |     | z         |
// +-----------+     +-----------+
//
func (n *node[T, A]) split(i int) (T, *node[T, A]) {
	out := n.n.items[i]
	var next *node[T, A]
	if n.n.leaf {
		next = newLeafNode[T, A]()
	} else {
		next = newNode[T, A]()
	}
	next.n.count = n.n.count - int16(i+1)
	copy(next.n.items[:], n.n.items[i+1:n.n.count])
	var r T
	for j := int16(i); j < n.n.count; j++ {
		n.n.items[j] = r
	}
	if !n.n.leaf {
		copy(next.children[:], n.children[i+1:n.n.count+1])
		for j := int16(i + 1); j <= n.n.count; j++ {
			n.children[j] = nil
		}
	}
	n.n.count = int16(i)

	n.n.aug.Update(n)
	next.n.aug.Update(next)
	//next.n.aug.UpdateOnSplit(next)
	/*
		if n.max.compare(next.max) != 0 && n.max.compare(upperBound(out)) != 0 {
			// If upper bound wasn't from new node or item
			// at index i, it must still be from old node.
		} else {
			n.max = n.findUpperBound()
		}
	*/
	return out, next
}

// insert inserts an item into the suAugBTree rooted at this node, making sure no
// nodes in the suAugBTree exceed maxItems items. Returns true if an existing item
// was replaced and false if an item was inserted. Also returns whether the
// node's upper bound changes.
func (n *node[T, A]) insert(item T) (replaced, newBound bool) {
	i, found := n.find(item)
	if found {
		n.n.items[i] = item
		return true, false
	}
	if n.n.leaf {
		n.insertAt(i, item, nil)
		return false, n.n.aug.UpdateOnInsert(item, n, nil)
	}
	if n.children[i].n.count >= maxItems {
		splitLa, splitNode := mut(&n.children[i]).split(maxItems / 2)
		n.insertAt(i, splitLa, splitNode)
		if item.Less(n.n.items[i]) {
			// no change, we want first split node
		} else if n.n.items[i].Less(item) {
			i++ // we want second split node
		} else {
			// TODO(ajwerner): add something to the augmentation api to
			// deal with replacement.
			n.n.items[i] = item
			return true, false
		}
	}
	replaced, newBound = mut(&n.children[i]).insert(item)
	if newBound {
		newBound = n.n.aug.UpdateOnInsert(item, n, nil)
	}
	return replaced, newBound
}

// removeMax removes and returns the maximum item from the suAugBTree rooted at
// this node.
func (n *node[T, A]) removeMax() T {
	if n.n.leaf {
		n.n.count--
		out := n.n.items[n.n.count]
		var r T
		n.n.items[n.n.count] = r
		n.n.aug.UpdateOnRemoval(out, n, nil)
		return out
	}
	// Recurse into max child.
	i := int(n.n.count)
	if n.children[i].n.count <= minItems {
		// Child not large enough to remove from.
		n.rebalanceOrMerge(i)
		return n.removeMax() // redo
	}
	child := mut(&n.children[i])
	out := child.removeMax()
	n.n.aug.UpdateOnRemoval(out, n, nil)
	return out
}

// rebalanceOrMerge grows child 'i' to ensure it has sufficient room to remove
// an item from it while keeping it at or above minItems.
func (n *node[T, A]) rebalanceOrMerge(i int) {
	switch {
	case i > 0 && n.children[i-1].n.count > minItems:
		// Rebalance from left sibling.
		//
		//          +-----------+
		//          |     y     |
		//          +----/-\----+
		//              /   \
		//             v     v
		// +-----------+     +-----------+
		// |         x |     |           |
		// +----------\+     +-----------+
		//             \
		//              v
		//              a
		//
		// After:
		//
		//          +-----------+
		//          |     x     |
		//          +----/-\----+
		//              /   \
		//             v     v
		// +-----------+     +-----------+
		// |           |     | y         |
		// +-----------+     +/----------+
		//                   /
		//                  v
		//                  a
		//
		left := mut(&n.children[i-1])
		child := mut(&n.children[i])
		xLa, grandChild := left.popBack()
		yLa := n.n.items[i-1]
		child.pushFront(yLa, grandChild)
		n.n.items[i-1] = xLa

		left.n.aug.UpdateOnRemoval(xLa, left, grandChild)
		child.n.aug.UpdateOnInsert(yLa, child, grandChild)

	case i < int(n.n.count) && n.children[i+1].n.count > minItems:
		// Rebalance from right sibling.
		//
		//          +-----------+
		//          |     y     |
		//          +----/-\----+
		//              /   \
		//             v     v
		// +-----------+     +-----------+
		// |           |     | x         |
		// +-----------+     +/----------+
		//                   /
		//                  v
		//                  a
		//
		// After:
		//
		//          +-----------+
		//          |     x     |
		//          +----/-\----+
		//              /   \
		//             v     v
		// +-----------+     +-----------+
		// |         y |     |           |
		// +----------\+     +-----------+
		//             \
		//              v
		//              a
		//
		right := mut(&n.children[i+1])
		child := mut(&n.children[i])
		xLa, grandChild := right.popFront()
		yLa := n.n.items[i]
		child.pushBack(yLa, grandChild)
		n.n.items[i] = xLa

		right.n.aug.UpdateOnRemoval(xLa, right, grandChild)
		child.n.aug.UpdateOnInsert(yLa, child, grandChild)

	default:
		// Merge with either the left or right sibling.
		//
		//          +-----------+
		//          |   u y v   |
		//          +----/-\----+
		//              /   \
		//             v     v
		// +-----------+     +-----------+
		// |         x |     | z         |
		// +-----------+     +-----------+
		//
		// After:
		//
		//          +-----------+
		//          |    u v    |
		//          +-----|-----+
		//                |
		//                v
		//          +-----------+
		//          |   x y z   |
		//          +-----------+
		//
		if i >= int(n.n.count) {
			i = int(n.n.count - 1)
		}
		child := mut(&n.children[i])
		// Make mergeChild mutable, bumping the refcounts on its children if necessary.
		_ = mut(&n.children[i+1])
		mergeLa, mergeChild := n.removeAt(i)
		child.n.items[child.n.count] = mergeLa
		copy(child.n.items[child.n.count+1:], mergeChild.n.items[:mergeChild.n.count])
		if !child.n.leaf {
			copy(child.children[child.n.count+1:], mergeChild.children[:mergeChild.n.count+1])
		}
		child.n.count += mergeChild.n.count + 1

		child.n.aug.UpdateOnInsert(mergeLa, child, mergeChild)
		mergeChild.decRef(false /* recursive */)
	}
}

// remove removes an item from the suAugBTree rooted at this node. Returns the item
// that was removed or nil if no matching item was found. Also returns whether
// the node's upper bound changes.
func (n *node[T, A]) remove(item T) (out T, found, newBound bool) {
	i, found := n.find(item)
	if n.n.leaf {
		if found {
			out, _ = n.removeAt(i)
			return out, true, n.n.aug.UpdateOnRemoval(out, n, nil)
		}
		var r T
		return r, false, false
	}
	if n.children[i].n.count <= minItems {
		// Child not large enough to remove from.
		n.rebalanceOrMerge(i)
		return n.remove(item) // redo
	}
	child := mut(&n.children[i])
	if found {
		// Replace the item being removed with the max item in our left child.
		out = n.n.items[i]
		n.n.items[i] = child.removeMax()
		return out, true, n.n.aug.UpdateOnRemoval(out, n, nil)
	}
	// Latch is not in this node and child is large enough to remove from.
	out, found, newBound = child.remove(item)
	if newBound {
		newBound = n.n.aug.UpdateOnRemoval(out, n, nil)
	}
	return out, found, newBound
}

// Reset removes all items from the AugBTree. In doing so, it allows memory
// held by the AugBTree to be recycled. Failure to call this method before
// letting a AugBTree be GCed is safe in that it won't cause a memory leak,
// but it will prevent AugBTree nodes from being efficiently re-used.
func (t *AugBTree[T, A]) Reset() {
	if t.root != nil {
		t.root.decRef(true /* recursive */)
		t.root = nil
	}
	t.length = 0
}

// Clone clones the AugBTree, lazily. It does so in constant time.
func (t *AugBTree[T, A]) Clone() AugBTree[T, A] {
	c := *t
	if c.root != nil {
		// Incrementing the reference count on the root node is sufficient to
		// ensure that no node in the cloned tree can be mutated by an actor
		// holding a reference to the original tree and vice versa. This
		// property is upheld because the root node in the receiver AugBTree and
		// the returned AugBTree will both necessarily have a reference count of at
		// least 2 when this method returns. All tree mutations recursively
		// acquire mutable node references (see mut) as they traverse down the
		// tree. The act of acquiring a mutable node reference performs a clone
		// if a node's reference count is greater than one. Cloning a node (see
		// clone) increases the reference count on each of its children,
		// ensuring that they have a reference count of at least 2. This, in
		// turn, ensures that any of the child nodes that are modified will also
		// be copied-on-write, recursively ensuring the immutability property
		// over the entire tree.
		c.root.incRef()
	}
	return c
}

// Delete removes an item equal to the passed in item from the tree.
func (t *AugBTree[T, A]) Delete(item T) {
	if t.root == nil || t.root.n.count == 0 {
		return
	}
	if _, found, _ := mut(&t.root).remove(item); found {
		t.length--
	}
	if t.root.n.count == 0 {
		old := t.root
		if t.root.n.leaf {
			t.root = nil
		} else {
			t.root = t.root.children[0]
		}
		old.decRef(false /* recursive */)
	}
}

// Set adds the given item to the tree. If an item in the tree already equals
// the given one, it is replaced with the new item.
func (t *AugBTree[T, A]) Set(item T) {
	if t.root == nil {
		t.root = newLeafNode[T, A]()
	} else if t.root.n.count >= maxItems {
		splitLa, splitNode := mut(&t.root).split(maxItems / 2)
		newRoot := newNode[T, A]()
		newRoot.n.count = 1
		newRoot.n.items[0] = splitLa
		newRoot.children[0] = t.root
		newRoot.children[1] = splitNode
		newRoot.n.aug.Update(newRoot)
		t.root = newRoot
	}
	if replaced, _ := mut(&t.root).insert(item); !replaced {
		t.length++
	}
}

// MakeIter returns a new Iterator object. It is not safe to continue using an
// Iterator after modifications are made to the tree. If modifications are made,
// create a new Iterator.
func (t *AugBTree[T, A]) MakeIter() Iterator[T, A] {
	return Iterator[T, A]{r: t.root, pos: -1}
}

// Height returns the height of the tree.
func (t *AugBTree[T, A]) Height() int {
	if t.root == nil {
		return 0
	}
	h := 1
	n := t.root
	for !n.n.leaf {
		n = n.children[0]
		h++
	}
	return h
}

// Len returns the number of items currently in the tree.
func (t *AugBTree[T, A]) Len() int {
	return t.length
}

// String returns a string description of the tree. The format is
// similar to the https://en.wikipedia.org/wiki/Newick_format.
func (t *AugBTree[T, A]) String() string {
	if t.length == 0 {
		return ";"
	}
	var b strings.Builder
	t.root.writeString(&b)
	return b.String()
}

func (n *node[T, A]) writeString(b *strings.Builder) {
	if n.n.leaf {
		for i := int16(0); i < n.n.count; i++ {
			if i != 0 {
				b.WriteString(",")
			}
			fmt.Fprintf(b, "%v", n.n.items[i])
		}
		return
	}
	for i := int16(0); i <= n.n.count; i++ {
		b.WriteString("(")
		n.children[i].writeString(b)
		b.WriteString(")")
		if i < n.n.count {
			fmt.Fprintf(b, "%v", n.n.items[i])
		}
	}
}

// iterStack represents a stack of (node, pos) tuples, which captures
// iteration state as an Iterator descends a AugBTree.
type iterStack[T Item[T], *A Aug[T, A]] struct {
	a    iterStackArr[T, A]
	aLen int16 // -1 when using s
	s    []iterFrame[T, A]
}

// Used to avoid allocations for stacks below a certain size.
type iterStackArr[T Item[T], *A Aug[T, A]] [3]iterFrame[T, A]

type iterFrame[T Item[T], *A Aug[T, A]] struct {
	n   *node[T, A]
	pos int16
}

func (is *iterStack[T, A]) push(f iterFrame[T, A]) {
	if is.aLen == -1 {
		is.s = append(is.s, f)
	} else if int(is.aLen) == len(is.a) {
		is.s = make([](iterFrame[T, A]), int(is.aLen)+1, 2*int(is.aLen))
		copy(is.s, is.a[:])
		is.s[int(is.aLen)] = f
		is.aLen = -1
	} else {
		is.a[is.aLen] = f
		is.aLen++
	}
}

func (is *iterStack[T, A]) pop() iterFrame[T, A] {
	if is.aLen == -1 {
		f := is.s[len(is.s)-1]
		is.s = is.s[:len(is.s)-1]
		return f
	}
	is.aLen--
	return is.a[is.aLen]
}

func (is *iterStack[T, A]) len() int {
	if is.aLen == -1 {
		return len(is.s)
	}
	return int(is.aLen)
}

func (is *iterStack[T, A]) reset() {
	if is.aLen == -1 {
		is.s = is.s[:0]
	} else {
		is.aLen = 0
	}
}

// Iterator is responsible for search and traversal within a AugBTree.
type Iterator[T Item[T], *A Aug[T, A]] struct {
	r   *node[T, A]
	n   *node[T, A]
	pos int16
	s   iterStack[T, A]
	// TODO(ajwerner): Add back augmented search
}

func (i *Iterator[T, A]) Reset() {
	i.n = i.r
	i.pos = -1
	i.s.reset()
}

func (i *Iterator[T, A]) Descend(n *node[T, A], pos int16) {
	i.s.push(iterFrame[T, A]{n: n, pos: pos})
	i.n = n.children[pos]
	i.pos = 0
}

// ascend ascends up to the current node's parent and resets the position
// to the one previously set for this parent node.
func (i *Iterator[T, A]) Ascend() {
	f := i.s.pop()
	i.n = f.n
	i.pos = f.pos
}

// SeekGE seeks to the first item greater-than or equal to the provided
// item.
func (i *Iterator[T, A]) SeekGE(item T) {
	i.Reset()
	if i.n == nil {
		return
	}
	for {
		pos, found := i.n.find(item)
		i.pos = int16(pos)
		if found {
			return
		}
		if i.n.n.leaf {
			if i.pos == i.n.n.count {
				i.Next()
			}
			return
		}
		i.Descend(i.n, i.pos)
	}
}

// SeekLT seeks to the first item less-than the provided item.
func (i *Iterator[T, A]) SeekLT(item T) {
	i.Reset()
	if i.n == nil {
		return
	}
	for {
		pos, found := i.n.find(item)
		i.pos = int16(pos)
		if found || i.n.n.leaf {
			i.Prev()
			return
		}
		i.Descend(i.n, i.pos)
	}
}

// First seeks to the first item in the AugBTree.
func (i *Iterator[T, A]) First() {
	i.Reset()
	if i.n == nil {
		return
	}
	for !i.n.n.leaf {
		i.Descend(i.n, 0)
	}
	i.pos = 0
}

// Last seeks to the last item in the AugBTree.
func (i *Iterator[T, A]) Last() {
	i.Reset()
	if i.n == nil {
		return
	}
	for !i.n.n.leaf {
		i.Descend(i.n, i.n.n.count)
	}
	i.pos = i.n.n.count - 1
}

// Next positions the Iterator to the item immediately following
// its current position.
func (i *Iterator[T, A]) Next() {
	if i.n == nil {
		return
	}

	if i.n.n.leaf {
		i.pos++
		if i.pos < i.n.n.count {
			return
		}
		for i.s.len() > 0 && i.pos >= i.n.n.count {
			i.Ascend()
		}
		return
	}

	i.Descend(i.n, i.pos+1)
	for !i.n.n.leaf {
		i.Descend(i.n, 0)
	}
	i.pos = 0
}

// Prev positions the Iterator to the item immediately preceding
// its current position.
func (i *Iterator[T, A]) Prev() {
	if i.n == nil {
		return
	}

	if i.n.n.leaf {
		i.pos--
		if i.pos >= 0 {
			return
		}
		for i.s.len() > 0 && i.pos < 0 {
			i.Ascend()
			i.pos--
		}
		return
	}

	i.Descend(i.n, i.pos)
	for !i.n.n.leaf {
		i.Descend(i.n, i.n.n.count)
	}
	i.pos = i.n.n.count - 1
}

// Valid returns whether the Iterator is positioned at a valid position.
func (i *Iterator[T, A]) Valid() bool {
	return i.pos >= 0 && i.pos < i.n.n.count
}

// Cur returns the item at the Iterator's current position. It is illegal
// to call Cur if the Iterator is not valid.
func (i *Iterator[T, A]) Cur() T {
	return i.n.n.items[i.pos]
}
